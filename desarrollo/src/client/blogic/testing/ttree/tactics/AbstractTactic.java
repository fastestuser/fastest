package client.blogic.testing.ttree.tactics;

import client.blogic.management.Controller;
import common.z.OpScheme;
import java.util.HashMap;
import java.util.Map;
import net.sourceforge.czt.session.SectionManager;
import net.sourceforge.czt.z.ast.Spec;

/**
 * Implementation of an abstract tactic that serves as basis for the concrete
 * tactics.
 * @author Pablo Rodriguez Monetti
 */
public abstract class AbstractTactic implements Tactic {

    protected Controller controller;
    protected Spec spec;
    protected String description;
    protected SectionManager manager;
    protected OpScheme originalOp;
    //Maps operation names to integers, to denote, for each operation, the last 
    // number used to index test classes  generated by this tactic    
    protected static Map<String, Integer> tClassNumbersMap;

    /**
     * Sets the specification of the system under test.
     * @param opScheme
     */
    public void setSpec(Spec spec) {
        this.spec = spec;
    }

    /**
     * Gets the schema of the operation under test.
     * @return
     */
    public Spec getSpec() {
        return spec;
    }

    /**
     * Sets the schema of the operation under test.
     * @param opScheme
     */
    public void setOriginalOp(OpScheme opScheme) {
        originalOp = opScheme;
    }

    /**
     * Gets the schema of the operation under test.
     * @return
     */
    public OpScheme getOriginalOp() {
        return originalOp;
    }

    /**
     * Sets a reference to the controller object
     * @param controller the reference to the controller object
     */
    public void setController(Controller controller) {
        this.controller = controller;
    }

    /**
     * Get the reference to the controller object
     * @return the reference to the controller object
     */
    public Controller getController() {
        return controller;
    }

    /**
     * Gets the description of this tactic.
     * @return the string with the description of this tactic.
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the description of this tactic.
     * @param description
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Sets the section manager of this tactic.
     * @param manager
     */
    public void setSectionManager(SectionManager manager) {
        this.manager = manager;

    }

    /**
     * Returns the section manager of this tactic.
     * @return
     */
    public SectionManager getSectionManager() {
        return manager;
    }

    /**
     * Clear all the entries in the map used to assign the names to the classes
     */
    public void resetNumbersMap() {
        tClassNumbersMap = new HashMap<String, Integer>();
    }
}
