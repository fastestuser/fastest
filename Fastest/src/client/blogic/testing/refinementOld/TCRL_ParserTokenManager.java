/* Generated By:JavaCC: Do not edit this line. TCRL_ParserTokenManager.java */
//********************************************************************************
//							        PAQUETE
//********************************************************************************
// Este es el PAQUETE en FASTEST al cual perteneceran las CLASES generadas
// por javaCC para el REFINAMIENTO a JAVAS
package client.blogic.testing.refinementOld;
//********************************************************************************
//						         IMPORTACIONES
//********************************************************************************
import java.util.*;

/** Token Manager. */
public class TCRL_ParserTokenManager implements TCRL_ParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x24000L) != 0L)
         {
            jjmatchedKind = 36;
            return 7;
         }
         if ((active0 & 0x73ffd2000L) != 0L)
         {
            jjmatchedKind = 36;
            return 43;
         }
         if ((active0 & 0xc0008000L) != 0L)
         {
            jjmatchedKind = 36;
            return 16;
         }
         return -1;
      case 1:
         if ((active0 & 0x7fdffe000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 36;
               jjmatchedPos = 1;
            }
            return 43;
         }
         if ((active0 & 0x2000000L) != 0L)
            return 43;
         return -1;
      case 2:
         if ((active0 & 0x5c58fe000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 2;
            return 43;
         }
         if ((active0 & 0x238700000L) != 0L)
            return 43;
         return -1;
      case 3:
         if ((active0 & 0x4c407e000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 3;
            return 43;
         }
         if ((active0 & 0x101880000L) != 0L)
            return 43;
         return -1;
      case 4:
         if ((active0 & 0x4c406e000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 4;
            return 43;
         }
         if ((active0 & 0x10000L) != 0L)
            return 43;
         return -1;
      case 5:
         if ((active0 & 0x4c006a000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 5;
            return 43;
         }
         if ((active0 & 0x4004000L) != 0L)
            return 43;
         return -1;
      case 6:
         if ((active0 & 0xc0048000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 6;
            return 43;
         }
         if ((active0 & 0x400022000L) != 0L)
            return 43;
         return -1;
      case 7:
         if ((active0 & 0xc0048000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 7;
            return 43;
         }
         return -1;
      case 8:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 8;
            return 43;
         }
         if ((active0 & 0xc0040000L) != 0L)
            return 43;
         return -1;
      case 9:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 9;
            return 43;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 45);
      case 40:
         return jjStopAtPos(0, 42);
      case 41:
         return jjStopAtPos(0, 43);
      case 44:
         return jjStopAtPos(0, 44);
      case 45:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000L);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x30L, 0x0L);
      case 58:
         return jjStopAtPos(0, 37);
      case 61:
         return jjMoveStringLiteralDfa1_0(0xc000000000L, 0x0L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x100400000L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x2a00000L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0xc0008000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x11000000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x4080000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x24000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x28000000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x142000L, 0x0L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 40);
      case 93:
         return jjStopAtPos(0, 41);
      default :
         return jjMoveNfa_0(8, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000L);
      case 47:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 61:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0L);
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
      case 66:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 25, 43);
         break;
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x5080000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x704000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x2c0008000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L, active1, 0L);
      case 89:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(2, 38);
         else if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(2, 76);
         break;
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L, active1, 0L);
      case 76:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 20, 43);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 43);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 22, 43);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 27, 43);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 28, 43);
         return jjMoveStringLiteralDfa3_0(active0, 0x1800000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x4002000L, active1, 0L);
      case 82:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 29, 43);
         return jjMoveStringLiteralDfa3_0(active0, 0x400050000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0L);
      case 84:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 33, 43);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 69:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 43);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 76:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 43);
         break;
      case 77:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0xc0002000L);
      case 82:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 43);
         break;
      case 84:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 43);
         break;
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 89:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 70:
         return jjMoveStringLiteralDfa5_0(active0, 0xc0000000L);
      case 72:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      case 89:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L);
      case 69:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 43);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 70:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L);
      case 82:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 43);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 84:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L);
      case 89:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0xc0000000L);
      case 77:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 13, 43);
         break;
      case 82:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 43);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 34, 43);
         break;
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L);
      case 78:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000L);
      case 82:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000L);
      case 84:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(8, 18, 43);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 30, 43);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 31, 43);
         break;
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(10, 15, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 43;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 43:
                  if ((0x83ff600200000000L & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAdd(40);
                  }
                  if ((0x83ff200200000000L & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(42);
                  }
                  if ((0x83ff200200000000L & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(41);
                  }
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(31);
                  }
                  else if (curChar == 42)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 7:
                  if ((0x83ff600200000000L & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAdd(40);
                  }
                  if ((0x83ff200200000000L & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(42);
                  }
                  if ((0x83ff200200000000L & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(41);
                  }
                  break;
               case 16:
                  if ((0x83ff600200000000L & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAdd(40);
                  }
                  if ((0x83ff200200000000L & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(42);
                  }
                  if ((0x83ff200200000000L & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(41);
                  }
                  break;
               case 1:
                  if (curChar == 10 && kind > 10)
                     kind = 10;
                  break;
               case 10:
                  if (curChar == 10 && kind > 11)
                     kind = 11;
                  break;
               case 19:
                  if (curChar == 10 && kind > 12)
                     kind = 12;
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(31);
                  break;
               case 32:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 33:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 34:
                  if (curChar == 34 && kind > 46)
                     kind = 46;
                  break;
               case 35:
                  if (curChar != 42)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAddStates(0, 2);
                  break;
               case 36:
                  if ((0x83ff200200000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(36);
                  break;
               case 37:
                  if ((0x83ff200200000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(37);
                  break;
               case 38:
                  if ((0x83ff200200000000L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(38);
                  break;
               case 40:
                  if ((0x83ff600200000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(40);
                  break;
               case 41:
                  if ((0x83ff200200000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(41);
                  break;
               case 42:
                  if ((0x83ff200200000000L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(42);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 43:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(42);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(41);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAdd(40);
                  }
                  break;
               case 8:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAddStates(3, 5);
                  }
                  else if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 29;
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(42);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(41);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAdd(40);
                  }
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(42);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(41);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAdd(40);
                  }
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 0:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 3:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 9:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 11:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 17:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 20:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 21:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 33:
                  jjAddStates(6, 7);
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 37:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 39:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAddStates(3, 5);
                  break;
               case 40:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(40);
                  break;
               case 41:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(41);
                  break;
               case 42:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(42);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 33:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(6, 7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 43 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(0, 0);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 8)
                     kind = 8;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     kind = 9;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 9;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 9)
                     kind = 9;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x403L) != 0L)
            return 0;
         if ((active1 & 0xcL) != 0L)
         {
            jjmatchedKind = 75;
            return 0;
         }
         return -1;
      case 1:
         if ((active1 & 0xcL) != 0L)
            return 0;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0, long active1)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_5(0, 64, 0);
      case 10:
         return jjStartNfaWithStates_5(0, 74, 0);
      case 13:
         return jjStartNfaWithStates_5(0, 65, 0);
      case 32:
         return jjStartNfaWithStates_5(0, 63, 0);
      case 47:
         return jjMoveStringLiteralDfa1_5(0xcL);
      case 64:
         return jjMoveStringLiteralDfa1_5(0x300L);
      default :
         return jjMoveNfa_5(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_5(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_5(1, 66, 0);
         break;
      case 47:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_5(1, 67, 0);
         break;
      case 69:
         return jjMoveStringLiteralDfa2_5(active1, 0x100L);
      case 83:
         return jjMoveStringLiteralDfa2_5(active1, 0x200L);
      default :
         break;
   }
   return jjStartNfa_5(0, 0L, active1);
}
private int jjMoveStringLiteralDfa2_5(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_5(0, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa3_5(active1, 0x200L);
      case 78:
         return jjMoveStringLiteralDfa3_5(active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_5(1, 0L, active1);
}
private int jjMoveStringLiteralDfa3_5(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_5(1, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(2, 0L, active1);
      return 3;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa4_5(active1, 0x100L);
      case 84:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(3, 73);
         break;
      default :
         break;
   }
   return jjStartNfa_5(2, 0L, active1);
}
private int jjMoveStringLiteralDfa4_5(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_5(2, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_5(active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_5(3, 0L, active1);
}
private int jjMoveStringLiteralDfa5_5(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_5(3, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa6_5(active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_5(4, 0L, active1);
}
private int jjMoveStringLiteralDfa6_5(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_5(4, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa7_5(active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_5(5, 0L, active1);
}
private int jjMoveStringLiteralDfa7_5(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_5(5, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa8_5(active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_5(6, 0L, active1);
}
private int jjMoveStringLiteralDfa8_5(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_5(6, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(7, 0L, active1);
      return 8;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa9_5(active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_5(7, 0L, active1);
}
private int jjMoveStringLiteralDfa9_5(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_5(7, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(8, 0L, active1);
      return 9;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa10_5(active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_5(8, 0L, active1);
}
private int jjMoveStringLiteralDfa10_5(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_5(8, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(9, 0L, active1);
      return 10;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa11_5(active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_5(9, 0L, active1);
}
private int jjMoveStringLiteralDfa11_5(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_5(9, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(10, 0L, active1);
      return 11;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa12_5(active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_5(10, 0L, active1);
}
private int jjMoveStringLiteralDfa12_5(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_5(10, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(11, 0L, active1);
      return 12;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa13_5(active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_5(11, 0L, active1);
}
private int jjMoveStringLiteralDfa13_5(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_5(11, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(12, 0L, active1);
      return 13;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa14_5(active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_5(12, 0L, active1);
}
private int jjMoveStringLiteralDfa14_5(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_5(12, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(13, 0L, active1);
      return 14;
   }
   switch(curChar)
   {
      case 78:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(14, 72);
         break;
      default :
         break;
   }
   return jjStartNfa_5(13, 0L, active1);
}
private int jjStartNfaWithStates_5(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_5(state, pos + 1);
}
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 75;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffffffffffeL & l) == 0L)
                     break;
                  kind = 75;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_7()
{
   return jjMoveNfa_7(0, 0);
}
private int jjMoveNfa_7(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L)
                  {
                     if (kind > 71)
                        kind = 71;
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 70)
                        kind = 70;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 70)
                     kind = 70;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     kind = 71;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 71;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 71)
                     kind = 71;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_6(0x10L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_6(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x40L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_4(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1000000000000000L) != 0L)
            return 11;
         if ((active0 & 0x2600000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            return 11;
         }
         return -1;
      case 1:
         if ((active0 & 0x600000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 1;
            return 11;
         }
         if ((active0 & 0x2000000000000000L) != 0L)
            return 11;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 35:
         return jjStopAtPos(0, 59);
      case 47:
         return jjMoveStringLiteralDfa1_4(0xc0000000000000L);
      case 65:
         return jjMoveStringLiteralDfa1_4(0x2000000000000000L);
      case 80:
         return jjStartNfaWithStates_4(0, 60, 11);
      case 100:
         return jjMoveStringLiteralDfa1_4(0x200000000000000L);
      case 114:
         return jjMoveStringLiteralDfa1_4(0x400000000000000L);
      default :
         return jjMoveNfa_4(7, 0);
   }
}
private int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         break;
      case 47:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         break;
      case 83:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_4(1, 61, 11);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_4(active0, 0x400000000000000L);
      case 111:
         return jjMoveStringLiteralDfa2_4(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(0, active0);
}
private int jjMoveStringLiteralDfa2_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 109:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_4(2, 57, 11);
         break;
      case 110:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_4(2, 58, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_4(1, active0);
}
private int jjStartNfaWithStates_4(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_4(state, pos + 1);
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if (curChar != 42)
                     break;
                  kind = 62;
                  jjCheckNAdd(9);
                  break;
               case 1:
                  if (curChar == 10)
                     kind = 56;
                  break;
               case 9:
                  if ((0x83ff200200000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(9);
                  break;
               case 11:
                  if ((0x83ff200200000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjstateSet[jjnewStateCnt++] = 11;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAdd(11);
                  }
                  else if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 0:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 3:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 10:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(11);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 64:
         return jjMoveStringLiteralDfa1_3(0x2000000000000L);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa2_3(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_3(0, active0);
}
private int jjMoveStringLiteralDfa2_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 85:
         return jjMoveStringLiteralDfa3_3(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_3(1, active0);
}
private int jjMoveStringLiteralDfa3_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa4_3(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_3(2, active0);
}
private int jjMoveStringLiteralDfa4_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa5_3(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_3(3, active0);
}
private int jjMoveStringLiteralDfa5_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 83:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(5, 49);
         break;
      default :
         break;
   }
   return jjStartNfa_3(4, active0);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 50;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffffffffffeL & l) == 0L)
                     break;
                  kind = 50;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   36, 37, 38, 40, 41, 42, 33, 34, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
"\123\131\116\117\116\131\115", "\120\114\124\131\120\105", "\105\116\125\115\105\122\101\124\111\117\116", 
"\101\122\122\101\131", "\120\117\111\116\124\105\122", "\123\124\122\125\103\124\125\122\105", 
"\114\111\123\124", "\123\114\114", "\104\114\114", "\103\114\114", "\104\103\114\114", 
"\106\111\114\105", "\104\102", "\114\111\116\105\101\122", "\122\120\114", "\106\120\114", 
"\122\106\122", "\105\116\104\117\106\106\111\114\105", 
"\105\116\104\117\106\114\111\116\105", "\103\110\101\122", "\111\116\124", "\126\101\122\103\110\101\122", null, null, 
"\72", "\75\75\76", "\75\75", "\133", "\135", "\50", "\51", "\54", "\12", null, null, 
null, "\100\122\125\114\105\123", null, null, null, null, null, null, null, 
"\144\157\155", "\162\141\156", "\43", "\120", "\101\123", null, null, null, null, null, null, 
null, null, null, null, 
"\100\105\116\104\101\102\123\124\122\101\103\124\111\117\116", "\100\123\105\124", "\12", null, "\55\55\76", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "CommentState",
   "LineCommentState",
   "PLCodeState",
   "Abstraction",
   "Abstraction_PLCode",
   "CommentStateAbstraction",
   "LineCommentStateAbstraction",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, 1, 2, 0, -1, 0, -1, 3, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 
   -1, -1, -1, -1, 1, 2, 5, -1, -1, -1, -1, 5, -1, -1, -1, -1, 6, 7, 5, -1, 5, -1, 0, 4, -1, 
   -1, -1, 
};
static final long[] jjtoToken = {
   0x7f07fffffffffc01L, 0x1f00L, 
};
static final long[] jjtoSkip = {
   0x80f800000000017eL, 0x5fL, 
};
static final long[] jjtoMore = {
   0x280L, 0xa0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[43];
private final int[] jjstateSet = new int[86];
protected char curChar;
/** Constructor. */
public TCRL_ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public TCRL_ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 43; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 8 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 7)
         {
            jjmatchedKind = 7;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
       case 4:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         if (jjmatchedPos == 0 && jjmatchedKind > 69)
         {
            jjmatchedKind = 69;
         }
         break;
       case 7:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_7();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
